; ------------------------------------------------
; OCL_asm14db04af8499574b_simd8_entry_0001.visa.ll
; LLVM major version: 14
; ------------------------------------------------
; Function Attrs: convergent nounwind
define spir_kernel void @_ZTS7imatrixIfLm8ELm8ELm16EE(float addrspace(1)* align 4 %0, %"class.sycl::_V1::range"* byval(%"class.sycl::_V1::range") align 8 %1, %"class.sycl::_V1::range"* byval(%"class.sycl::_V1::range") align 8 %2, i64 %3, %"class.sycl::_V1::ext::oneapi::bfloat16" addrspace(1)* align 2 %4, %"class.sycl::_V1::range"* byval(%"class.sycl::_V1::range") align 8 %5, %"class.sycl::_V1::range"* byval(%"class.sycl::_V1::range") align 8 %6, %"class.sycl::_V1::ext::oneapi::bfloat16" addrspace(1)* align 2 %7, %"class.sycl::_V1::range"* byval(%"class.sycl::_V1::range") align 8 %8, %"class.sycl::_V1::range"* byval(%"class.sycl::_V1::range") align 8 %9, <8 x i32> %r0, <8 x i32> %payloadHeader, <3 x i32> %localSize, <3 x i32> %enqueuedLocalSize, i16 %localIdX, i16 %localIdY, i16 %localIdZ, i8* %privateBase, i64 %const_reg_qword, i64 %const_reg_qword1, i64 %const_reg_qword2, i64 %const_reg_qword3, i64 %const_reg_qword4, i64 %const_reg_qword5, i64 %const_reg_qword6, i64 %const_reg_qword7, i64 %const_reg_qword8, i64 %const_reg_qword9, i64 %const_reg_qword10, i64 %const_reg_qword11, i32 %bufferOffset, i32 %bufferOffset12, i32 %bufferOffset13) #0 {
__builtin_spriv_OpJointMatrixLoadINTEL_Accumulator_RowMajor_8x8_i32_8_global_v8i8_pi32_i32.24.exit:
; BB0 :
  %10 = bitcast i64 %3 to <2 x i32>		; visa id: 2
  %11 = extractelement <2 x i32> %10, i32 0		; visa id: 3
  %12 = extractelement <2 x i32> %10, i32 1		; visa id: 3
  %13 = bitcast i64 %const_reg_qword1 to <2 x i32>		; visa id: 3
  %14 = extractelement <2 x i32> %13, i32 0		; visa id: 4
  %15 = extractelement <2 x i32> %13, i32 1		; visa id: 4
  %16 = bitcast i64 %const_reg_qword2 to <2 x i32>		; visa id: 4
  %17 = extractelement <2 x i32> %16, i32 0		; visa id: 5
  %18 = extractelement <2 x i32> %16, i32 1		; visa id: 5
  %19 = bitcast i64 %const_reg_qword3 to <2 x i32>		; visa id: 5
  %20 = extractelement <2 x i32> %19, i32 0		; visa id: 6
  %21 = extractelement <2 x i32> %19, i32 1		; visa id: 6
  %22 = bitcast i64 %const_reg_qword5 to <2 x i32>		; visa id: 6
  %23 = extractelement <2 x i32> %22, i32 0		; visa id: 7
  %24 = extractelement <2 x i32> %22, i32 1		; visa id: 7
  %25 = bitcast i64 %const_reg_qword6 to <2 x i32>		; visa id: 7
  %26 = extractelement <2 x i32> %25, i32 0		; visa id: 8
  %27 = extractelement <2 x i32> %25, i32 1		; visa id: 8
  %28 = bitcast i64 %const_reg_qword7 to <2 x i32>		; visa id: 8
  %29 = extractelement <2 x i32> %28, i32 0		; visa id: 9
  %30 = extractelement <2 x i32> %28, i32 1		; visa id: 9
  %31 = bitcast i64 %const_reg_qword9 to <2 x i32>		; visa id: 9
  %32 = extractelement <2 x i32> %31, i32 0		; visa id: 10
  %33 = extractelement <2 x i32> %31, i32 1		; visa id: 10
  %34 = bitcast i64 %const_reg_qword10 to <2 x i32>		; visa id: 10
  %35 = extractelement <2 x i32> %34, i32 0		; visa id: 11
  %36 = extractelement <2 x i32> %34, i32 1		; visa id: 11
  %37 = bitcast i64 %const_reg_qword11 to <2 x i32>		; visa id: 11
  %38 = extractelement <2 x i32> %37, i32 0		; visa id: 12
  %39 = extractelement <2 x i32> %37, i32 1		; visa id: 12
  %40 = extractelement <8 x i32> %payloadHeader, i32 0		; visa id: 12
  %41 = extractelement <8 x i32> %payloadHeader, i32 1		; visa id: 12
  %42 = extractelement <3 x i32> %enqueuedLocalSize, i32 0		; visa id: 12
  %43 = extractelement <3 x i32> %enqueuedLocalSize, i32 1		; visa id: 12
  %44 = extractelement <8 x i32> %r0, i32 1		; visa id: 12
  %45 = extractelement <8 x i32> %r0, i32 6		; visa id: 12
  %46 = call { i32, i32 } @llvm.genx.GenISA.mul.pair(i32 %17, i32 %18, i32 %14, i32 %15)
  %47 = extractvalue { i32, i32 } %46, 0		; visa id: 12
  %48 = extractvalue { i32, i32 } %46, 1		; visa id: 12
  %49 = shl i32 %47, 2		; visa id: 20
  %50 = add i32 %49, %bufferOffset		; visa id: 21
  %51 = shl i32 %20, 2		; visa id: 22
  %52 = add i32 %50, %51		; visa id: 23
  %53 = call { i32, i32 } @llvm.genx.GenISA.mul.pair(i32 %26, i32 %27, i32 %23, i32 %24)
  %54 = extractvalue { i32, i32 } %53, 0		; visa id: 24
  %55 = extractvalue { i32, i32 } %53, 1		; visa id: 24
  %56 = shl i32 %54, 1		; visa id: 32
  %57 = add i32 %56, %bufferOffset12		; visa id: 33
  %58 = shl i32 %29, 1		; visa id: 34
  %59 = add i32 %57, %58		; visa id: 35
  %60 = call { i32, i32 } @llvm.genx.GenISA.mul.pair(i32 %35, i32 %36, i32 %32, i32 %33)
  %61 = extractvalue { i32, i32 } %60, 0		; visa id: 36
  %62 = extractvalue { i32, i32 } %60, 1		; visa id: 36
  %63 = shl i32 %61, 1		; visa id: 44
  %64 = add i32 %63, %bufferOffset13		; visa id: 45
  %65 = shl i32 %38, 1		; visa id: 46
  %66 = add i32 %64, %65		; visa id: 47
  %67 = mul i32 %43, %45		; visa id: 48
  %localIdY15 = zext i16 %localIdY to i32		; visa id: 49
  %68 = add i32 %67, %localIdY15
  %69 = add i32 %68, %41		; visa id: 50
  %70 = call i32 @llvm.genx.GenISA.WaveShuffleIndex.i32.i32.i32(i32 %69, i32 0, i32 0)
  %71 = mul i32 %42, %44		; visa id: 51
  %localIdX21 = zext i16 %localIdX to i32		; visa id: 52
  %72 = add i32 %71, %localIdX21
  %73 = add i32 %72, %40		; visa id: 53
  %74 = zext i16 %localIdY to i32		; visa id: 54
  %75 = insertelement <2 x i32> undef, i32 %74, i32 0		; visa id: 55
  %76 = insertelement <2 x i32> %75, i32 0, i32 1		; visa id: 56
  %77 = bitcast <2 x i32> %76 to i64		; visa id: 57
  %78 = call i64 @llvm.genx.GenISA.WaveShuffleIndex.i64.i32.i32(i64 %77, i32 0, i32 0)		; visa id: 59
  %79 = bitcast i64 %78 to <2 x i32>		; visa id: 61
  %80 = extractelement <2 x i32> %79, i32 0		; visa id: 62
  %81 = extractelement <2 x i32> %79, i32 1		; visa id: 62
  %82 = call { i32, i32 } @llvm.genx.GenISA.sub.pair(i32 %70, i32 0, i32 %80, i32 %81)
  %83 = extractvalue { i32, i32 } %82, 0		; visa id: 62
  %84 = zext i16 %localIdX to i32		; visa id: 63
  %85 = call { i32, i32 } @llvm.genx.GenISA.sub.pair(i32 %73, i32 0, i32 %84, i32 0)
  %86 = extractvalue { i32, i32 } %85, 0		; visa id: 64
  %87 = extractvalue { i32, i32 } %85, 1		; visa id: 64
  %88 = call { i32, i32 } @llvm.genx.GenISA.add.pair(i32 %47, i32 %48, i32 %20, i32 %21)
  %89 = extractvalue { i32, i32 } %88, 0		; visa id: 66
  %90 = extractvalue { i32, i32 } %88, 1		; visa id: 66
  %91 = call { i32, i32 } @llvm.genx.GenISA.sub.pair(i32 0, i32 0, i32 %89, i32 %90)
  %92 = extractvalue { i32, i32 } %91, 0		; visa id: 68
  %93 = shl i32 %92, 2		; visa id: 69
  %94 = add i32 %52, %93		; visa id: 70
  %95 = shl i32 %83, 7		; visa id: 71
  %96 = shl i32 %95, 2		; visa id: 72
  %97 = add i32 %94, %96		; visa id: 73
  %98 = or i32 %87, %12		; visa id: 74
  %99 = icmp ult i32 %98, 1		; visa id: 75
  br i1 %99, label %214, label %100, !stats.blockFrequency.digits !523, !stats.blockFrequency.scale !524		; visa id: 76

100:                                              ; preds = %__builtin_spriv_OpJointMatrixLoadINTEL_Accumulator_RowMajor_8x8_i32_8_global_v8i8_pi32_i32.24.exit
; BB1 :
  %101 = lshr i32 %11, 20		; visa id: 78
  %102 = shl i32 %12, 12		; visa id: 79
  %103 = lshr i32 %11, 20		; visa id: 80
  %104 = or i32 %103, %102		; visa id: 81
  %105 = lshr i32 %12, 8		; visa id: 82
  %106 = uitofp i32 %105 to float		; visa id: 83
  %107 = and i32 %104, 1044480
  %108 = or i32 %107, %101		; visa id: 84
  %109 = uitofp i32 %108 to float		; visa id: 86
  %110 = and i32 %11, 1048575		; visa id: 87
  %111 = uitofp i32 %110 to float		; visa id: 88
  %112 = call float @llvm.fma.f32(float %109, float 0x4130000000000000, float %111) #4		; visa id: 89
  %113 = call float @llvm.fma.f32(float %106, float 0x4270000000000000, float %112) #4		; visa id: 91
  %114 = lshr i32 %87, 8		; visa id: 93
  %115 = uitofp i32 %114 to float		; visa id: 94
  %116 = fdiv float 1.000000e+00, %113		; visa id: 95
  %117 = call float @llvm.fma.f32(float %116, float 0xBE9C000000000000, float %116) #4		; visa id: 96
  %118 = fmul float %117, %115		; visa id: 98
  %119 = call float @llvm.floor.f32(float %118) #4		; visa id: 99
  %120 = fsub float 0.000000e+00, %111
  %121 = call float @llvm.fma.f32(float %120, float %119, float %115) #4		; visa id: 100
  %122 = fmul float %109, 0xC130000000000000		; visa id: 101
  %123 = call float @llvm.fma.f32(float %122, float %119, float %121) #4		; visa id: 102
  %124 = lshr i32 %86, 20		; visa id: 103
  %125 = shl i32 %87, 12		; visa id: 104
  %126 = lshr i32 %86, 20		; visa id: 105
  %127 = or i32 %126, %125		; visa id: 106
  %128 = and i32 %127, 1044480
  %129 = or i32 %128, %124		; visa id: 107
  %130 = uitofp i32 %129 to float		; visa id: 108
  %131 = call float @llvm.fma.f32(float %123, float 0x4130000000000000, float %130) #4		; visa id: 109
  %132 = fmul float %117, %131		; visa id: 110
  %133 = call float @llvm.floor.f32(float %132) #4		; visa id: 111
  %134 = fsub float 0.000000e+00, %109
  %135 = call float @llvm.fma.f32(float %134, float %133, float %123) #4		; visa id: 112
  %136 = fmul float %106, 0xC130000000000000		; visa id: 113
  %137 = call float @llvm.fma.f32(float %136, float %133, float %135) #4		; visa id: 114
  %138 = fmul float %111, 0x3EB0000000000000		; visa id: 115
  %139 = fmul float %138, %133		; visa id: 116
  %140 = call float @llvm.floor.f32(float %139) #4		; visa id: 117
  %141 = fsub float 0.000000e+00, %140
  %142 = call float @llvm.fma.f32(float %133, float %138, float %141) #4		; visa id: 118
  %143 = call float @llvm.fma.f32(float %140, float -1.000000e+00, float %137) #4		; visa id: 119
  %144 = call float @llvm.fma.f32(float %142, float 0xC130000000000000, float %130) #4		; visa id: 121
  %145 = and i32 %86, 1048575		; visa id: 123
  %146 = uitofp i32 %145 to float		; visa id: 124
  %147 = call float @llvm.fma.f32(float %144, float 0x4130000000000000, float %146) #4		; visa id: 125
  %148 = call float @llvm.fma.f32(float %143, float 0x4270000000000000, float %147) #4		; visa id: 126
  %149 = fmul float %117, %148		; visa id: 127
  %150 = call float @llvm.floor.f32(float %149) #4		; visa id: 128
  %151 = fsub float 0.000000e+00, %106
  %152 = call float @llvm.fma.f32(float %151, float %150, float %143) #4		; visa id: 129
  %153 = fmul float %138, %150		; visa id: 130
  %154 = call float @llvm.floor.f32(float %153) #4		; visa id: 131
  %155 = fsub float 0.000000e+00, %154
  %156 = call float @llvm.fma.f32(float %150, float %138, float %155) #4		; visa id: 132
  %157 = call float @llvm.fma.f32(float %154, float -1.000000e+00, float %144) #4		; visa id: 133
  %158 = call float @llvm.fma.f32(float %156, float 0xC130000000000000, float %146) #4		; visa id: 134
  %159 = fmul float %109, 0x3EB0000000000000		; visa id: 135
  %160 = fmul float %159, %150		; visa id: 136
  %161 = call float @llvm.floor.f32(float %160) #4		; visa id: 137
  %162 = fsub float 0.000000e+00, %161
  %163 = call float @llvm.fma.f32(float %150, float %159, float %162) #4		; visa id: 138
  %164 = call float @llvm.fma.f32(float %161, float -1.000000e+00, float %152) #4		; visa id: 139
  %165 = call float @llvm.fma.f32(float %163, float 0xC130000000000000, float %157) #4		; visa id: 140
  %166 = fptosi float %119 to i32		; visa id: 141
  %167 = fptosi float %133 to i32		; visa id: 142
  %168 = fptosi float %150 to i32		; visa id: 143
  %169 = call float @llvm.fma.f32(float %164, float 0x4130000000000000, float %165) #4		; visa id: 144
  %170 = call float @llvm.fma.f32(float %169, float 0x4130000000000000, float %158) #4		; visa id: 145
  %171 = fmul float %117, %170		; visa id: 146
  %172 = call float @llvm.floor.f32(float %171) #4		; visa id: 147
  %173 = fsub float 0.000000e+00, %172
  %174 = call float @llvm.fma.f32(float %173, float %106, float %164) #4		; visa id: 148
  %175 = call float @llvm.fma.f32(float %173, float %109, float %165) #4		; visa id: 149
  %176 = call float @llvm.fma.f32(float %173, float %111, float %158) #4		; visa id: 150
  %177 = fptosi float %172 to i32		; visa id: 151
  %178 = add i32 %177, %168
  %179 = fptosi float %175 to i32		; visa id: 152
  %180 = fptosi float %176 to i32		; visa id: 153
  %181 = ashr i32 %179, 31		; visa id: 154
  %182 = shl i32 %179, 20		; visa id: 155
  %183 = lshr i32 %179, 12		; visa id: 156
  %184 = shl i32 %181, 20		; visa id: 157
  %185 = or i32 %184, %183		; visa id: 158
  %186 = ashr i32 %180, 31		; visa id: 159
  %187 = fmul float %174, 0x3DF0000000000000		; visa id: 160
  %188 = call float @llvm.trunc.f32(float %187)		; visa id: 161
  %189 = call float @llvm.fma.f32(float %188, float 0xC1F0000000000000, float %174)		; visa id: 162
  %190 = fptoui float %189 to i32		; visa id: 164
  %191 = shl i32 %190, 8		; visa id: 165
  %192 = call { i32, i32 } @llvm.genx.GenISA.add.pair(i32 0, i32 %191, i32 %180, i32 %186)
  %193 = extractvalue { i32, i32 } %192, 0		; visa id: 166
  %194 = extractvalue { i32, i32 } %192, 1		; visa id: 166
  %195 = call { i32, i32 } @llvm.genx.GenISA.add.pair(i32 %193, i32 %194, i32 %182, i32 %185)
  %196 = extractvalue { i32, i32 } %195, 0		; visa id: 168
  %197 = extractvalue { i32, i32 } %195, 1		; visa id: 168
  %198 = shl i32 %166, 8		; visa id: 170
  %199 = shl i32 %167, 20		; visa id: 171
  %200 = lshr i32 %167, 12		; visa id: 172
  %201 = call { i32, i32 } @llvm.genx.GenISA.add.pair(i32 %199, i32 %200, i32 0, i32 %198)
  %202 = extractvalue { i32, i32 } %201, 0		; visa id: 173
  %203 = extractvalue { i32, i32 } %201, 1		; visa id: 173
  %204 = icmp eq i32 %197, %12
  %205 = icmp uge i32 %196, %11		; visa id: 175
  %206 = and i1 %204, %205		; visa id: 176
  %207 = icmp ugt i32 %197, %12
  %208 = or i1 %206, %207		; visa id: 178
  %209 = sext i1 %208 to i32		; visa id: 180
  %210 = sub i32 0, %209
  %211 = add i32 %178, %210		; visa id: 181
  %212 = call { i32, i32 } @llvm.genx.GenISA.add.pair(i32 %202, i32 %203, i32 %211, i32 0)
  %213 = extractvalue { i32, i32 } %212, 0		; visa id: 182
  br label %__igcbuiltin_u64_udiv_sp.exit, !stats.blockFrequency.digits !523, !stats.blockFrequency.scale !525		; visa id: 183

214:                                              ; preds = %__builtin_spriv_OpJointMatrixLoadINTEL_Accumulator_RowMajor_8x8_i32_8_global_v8i8_pi32_i32.24.exit
; BB2 :
  %tobool.i.i = icmp eq i32 %11, 0		; visa id: 185
  br i1 %tobool.i.i, label %.precompiled_u32divrem_sp.exit.i_crit_edge, label %if.end.i.i, !stats.blockFrequency.digits !523, !stats.blockFrequency.scale !525		; visa id: 186

if.end.i.i:                                       ; preds = %214
; BB3 :
  %215 = call float @llvm.genx.GenISA.uitof.rtz.f32.i32(i32 %11) #4		; visa id: 188
  %conv.i.i = fptoui float %215 to i32		; visa id: 190
  %sub.i.i = sub i32 %11, %conv.i.i		; visa id: 191
  %216 = call float @llvm.genx.GenISA.uitof.rtz.f32.i32(i32 %86) #4		; visa id: 192
  %div.i.i = fdiv float 1.000000e+00, %215, !fpmath !526		; visa id: 193
  %217 = call float @llvm.genx.GenISA.fma.rtz.f32.f32.f32.f32(float %div.i.i, float 0xBE98000000000000, float %div.i.i) #4		; visa id: 194
  %218 = call float @llvm.genx.GenISA.mul.rtz.f32.f32.f32(float %216, float %217) #4		; visa id: 195
  %conv3.i.i = fptoui float %216 to i32		; visa id: 196
  %sub4.i.i = sub i32 %86, %conv3.i.i		; visa id: 197
  %conv8.i.i = fptoui float %218 to i32		; visa id: 198
  %219 = call float @llvm.genx.GenISA.uitof.rtz.f32.i32(i32 %sub.i.i) #4		; visa id: 199
  %220 = call float @llvm.genx.GenISA.uitof.rtz.f32.i32(i32 %sub4.i.i) #4		; visa id: 200
  %221 = call float @llvm.genx.GenISA.uitof.rtz.f32.i32(i32 %conv8.i.i) #4		; visa id: 201
  %222 = fsub float 0.000000e+00, %215		; visa id: 202
  %223 = call float @llvm.genx.GenISA.fma.rtz.f32.f32.f32.f32(float %222, float %221, float %216) #4		; visa id: 203
  %224 = fsub float 0.000000e+00, %219		; visa id: 204
  %225 = call float @llvm.genx.GenISA.fma.rtz.f32.f32.f32.f32(float %224, float %221, float %220) #4		; visa id: 205
  %226 = call float @llvm.genx.GenISA.add.rtz.f32.f32.f32(float %223, float %225) #4		; visa id: 206
  %227 = call float @llvm.genx.GenISA.mul.rtz.f32.f32.f32(float %217, float %226) #4		; visa id: 207
  %conv16.i.i = fptoui float %227 to i32		; visa id: 209
  %add.i.i = add i32 %conv16.i.i, %conv8.i.i		; visa id: 210
  %mul.i.i = mul i32 %add.i.i, %11		; visa id: 211
  %sub17.i.i = sub i32 %86, %mul.i.i		; visa id: 212
  %cmp.i.i = icmp uge i32 %sub17.i.i, %11
  %228 = sext i1 %cmp.i.i to i32		; visa id: 213
  %229 = sub i32 0, %228
  %add19.i.i = add i32 %add.i.i, %229		; visa id: 214
  br label %precompiled_u32divrem_sp.exit.i, !stats.blockFrequency.digits !527, !stats.blockFrequency.scale !528		; visa id: 215

.precompiled_u32divrem_sp.exit.i_crit_edge:       ; preds = %214
; BB4 :
  br label %precompiled_u32divrem_sp.exit.i, !stats.blockFrequency.digits !529, !stats.blockFrequency.scale !530		; visa id: 218

precompiled_u32divrem_sp.exit.i:                  ; preds = %.precompiled_u32divrem_sp.exit.i_crit_edge, %if.end.i.i
; BB:
  %retval.0.i.i = phi i32 [ %add19.i.i, %if.end.i.i ], [ -1, %.precompiled_u32divrem_sp.exit.i_crit_edge ]
  br label %__igcbuiltin_u64_udiv_sp.exit, !stats.blockFrequency.digits !523, !stats.blockFrequency.scale !525

__igcbuiltin_u64_udiv_sp.exit:                    ; preds = %precompiled_u32divrem_sp.exit.i, %100
; BB6 :
  %230 = phi i32 [ %retval.0.i.i, %precompiled_u32divrem_sp.exit.i ], [ %213, %100 ]
  %231 = shl i32 %230, 3		; visa id: 219
  %232 = shl i32 %231, 2		; visa id: 220
  %233 = add i32 %97, %232		; visa id: 221
  %234 = inttoptr i32 %233 to i32 addrspace(131072)*
  %235 = call float @llvm.genx.GenISA.simdBlockRead.f32.p131072i32(i32 addrspace(131072)* %234)		; visa id: 222
  %236 = add i32 %233, 64		; visa id: 224
  %237 = inttoptr i32 %236 to i32 addrspace(131072)*
  %238 = call float @llvm.genx.GenISA.simdBlockRead.f32.p131072i32(i32 addrspace(131072)* %237)		; visa id: 225
  %239 = add i32 %233, 128		; visa id: 227
  %240 = inttoptr i32 %239 to i32 addrspace(131072)*
  %241 = call float @llvm.genx.GenISA.simdBlockRead.f32.p131072i32(i32 addrspace(131072)* %240)		; visa id: 228
  %242 = add i32 %233, 192		; visa id: 230
  %243 = inttoptr i32 %242 to i32 addrspace(131072)*
  %244 = call float @llvm.genx.GenISA.simdBlockRead.f32.p131072i32(i32 addrspace(131072)* %243)		; visa id: 231
  %245 = add i32 %233, 256		; visa id: 233
  %246 = inttoptr i32 %245 to i32 addrspace(131072)*
  %247 = call float @llvm.genx.GenISA.simdBlockRead.f32.p131072i32(i32 addrspace(131072)* %246)		; visa id: 234
  %248 = add i32 %233, 320		; visa id: 236
  %249 = inttoptr i32 %248 to i32 addrspace(131072)*
  %250 = call float @llvm.genx.GenISA.simdBlockRead.f32.p131072i32(i32 addrspace(131072)* %249)		; visa id: 237
  %251 = add i32 %233, 384		; visa id: 239
  %252 = inttoptr i32 %251 to i32 addrspace(131072)*
  %253 = call float @llvm.genx.GenISA.simdBlockRead.f32.p131072i32(i32 addrspace(131072)* %252)		; visa id: 240
  %254 = add i32 %233, 448		; visa id: 242
  %255 = inttoptr i32 %254 to i32 addrspace(131072)*
  %256 = call float @llvm.genx.GenISA.simdBlockRead.f32.p131072i32(i32 addrspace(131072)* %255)		; visa id: 243
  %.28.vec.insert.assembled.vect = insertelement <8 x float> undef, float %235, i32 0		; visa id: 245
  %.28.vec.insert.assembled.vect170 = insertelement <8 x float> %.28.vec.insert.assembled.vect, float %238, i32 1		; visa id: 245
  %.28.vec.insert.assembled.vect171 = insertelement <8 x float> %.28.vec.insert.assembled.vect170, float %241, i32 2		; visa id: 245
  %.28.vec.insert.assembled.vect172 = insertelement <8 x float> %.28.vec.insert.assembled.vect171, float %244, i32 3		; visa id: 245
  %.28.vec.insert.assembled.vect173 = insertelement <8 x float> %.28.vec.insert.assembled.vect172, float %247, i32 4		; visa id: 245
  %.28.vec.insert.assembled.vect174 = insertelement <8 x float> %.28.vec.insert.assembled.vect173, float %250, i32 5		; visa id: 245
  %.28.vec.insert.assembled.vect175 = insertelement <8 x float> %.28.vec.insert.assembled.vect174, float %253, i32 6		; visa id: 245
  %.28.vec.insert.assembled.vect176 = insertelement <8 x float> %.28.vec.insert.assembled.vect175, float %256, i32 7		; visa id: 245
  %257 = call { i32, i32 } @llvm.genx.GenISA.add.pair(i32 %54, i32 %55, i32 %29, i32 %30)
  %258 = extractvalue { i32, i32 } %257, 0		; visa id: 245
  %259 = extractvalue { i32, i32 } %257, 1		; visa id: 245
  %260 = call { i32, i32 } @llvm.genx.GenISA.sub.pair(i32 0, i32 0, i32 %258, i32 %259)
  %261 = extractvalue { i32, i32 } %260, 0		; visa id: 247
  %262 = shl i32 %261, 1		; visa id: 248
  %263 = add i32 %59, %262		; visa id: 249
  %264 = shl i32 %83, 8		; visa id: 250
  %265 = shl i32 %264, 1		; visa id: 251
  %266 = add i32 %263, %265		; visa id: 252
  %267 = call { i32, i32 } @llvm.genx.GenISA.add.pair(i32 %61, i32 %62, i32 %38, i32 %39)
  %268 = extractvalue { i32, i32 } %267, 0		; visa id: 253
  %269 = extractvalue { i32, i32 } %267, 1		; visa id: 253
  %270 = call { i32, i32 } @llvm.genx.GenISA.sub.pair(i32 0, i32 0, i32 %268, i32 %269)
  %271 = extractvalue { i32, i32 } %270, 0		; visa id: 255
  %272 = shl i32 %271, 1		; visa id: 256
  %273 = add i32 %66, %272		; visa id: 257
  %274 = shl i32 %230, 4		; visa id: 258
  %275 = shl i32 %274, 1		; visa id: 259
  %276 = add i32 %273, %275		; visa id: 260
  %277 = inttoptr i32 %266 to i32 addrspace(131073)*
  %278 = call i32 @llvm.genx.GenISA.simdBlockRead.i32.p131073i32(i32 addrspace(131073)* %277)		; visa id: 261
  %279 = add i32 %266, 64		; visa id: 263
  %280 = inttoptr i32 %279 to i32 addrspace(131073)*
  %281 = call i32 @llvm.genx.GenISA.simdBlockRead.i32.p131073i32(i32 addrspace(131073)* %280)		; visa id: 264
  %282 = add i32 %266, 128		; visa id: 266
  %283 = inttoptr i32 %282 to i32 addrspace(131073)*
  %284 = call i32 @llvm.genx.GenISA.simdBlockRead.i32.p131073i32(i32 addrspace(131073)* %283)		; visa id: 267
  %285 = add i32 %266, 192		; visa id: 269
  %286 = inttoptr i32 %285 to i32 addrspace(131073)*
  %287 = call i32 @llvm.genx.GenISA.simdBlockRead.i32.p131073i32(i32 addrspace(131073)* %286)		; visa id: 270
  %288 = add i32 %266, 256		; visa id: 272
  %289 = inttoptr i32 %288 to i32 addrspace(131073)*
  %290 = call i32 @llvm.genx.GenISA.simdBlockRead.i32.p131073i32(i32 addrspace(131073)* %289)		; visa id: 273
  %291 = add i32 %266, 320		; visa id: 275
  %292 = inttoptr i32 %291 to i32 addrspace(131073)*
  %293 = call i32 @llvm.genx.GenISA.simdBlockRead.i32.p131073i32(i32 addrspace(131073)* %292)		; visa id: 276
  %294 = add i32 %266, 384		; visa id: 278
  %295 = inttoptr i32 %294 to i32 addrspace(131073)*
  %296 = call i32 @llvm.genx.GenISA.simdBlockRead.i32.p131073i32(i32 addrspace(131073)* %295)		; visa id: 279
  %297 = add i32 %266, 448		; visa id: 281
  %298 = inttoptr i32 %297 to i32 addrspace(131073)*
  %299 = call i32 @llvm.genx.GenISA.simdBlockRead.i32.p131073i32(i32 addrspace(131073)* %298)		; visa id: 282
  %.28.vec.insert24.assembled.vect = insertelement <8 x i32> undef, i32 %278, i32 0		; visa id: 284
  %.28.vec.insert24.assembled.vect177 = insertelement <8 x i32> %.28.vec.insert24.assembled.vect, i32 %281, i32 1		; visa id: 284
  %.28.vec.insert24.assembled.vect178 = insertelement <8 x i32> %.28.vec.insert24.assembled.vect177, i32 %284, i32 2		; visa id: 284
  %.28.vec.insert24.assembled.vect179 = insertelement <8 x i32> %.28.vec.insert24.assembled.vect178, i32 %287, i32 3		; visa id: 284
  %.28.vec.insert24.assembled.vect180 = insertelement <8 x i32> %.28.vec.insert24.assembled.vect179, i32 %290, i32 4		; visa id: 284
  %.28.vec.insert24.assembled.vect181 = insertelement <8 x i32> %.28.vec.insert24.assembled.vect180, i32 %293, i32 5		; visa id: 284
  %.28.vec.insert24.assembled.vect182 = insertelement <8 x i32> %.28.vec.insert24.assembled.vect181, i32 %296, i32 6		; visa id: 284
  %.28.vec.insert24.assembled.vect183 = insertelement <8 x i32> %.28.vec.insert24.assembled.vect182, i32 %299, i32 7		; visa id: 284
  %300 = inttoptr i32 %276 to i32 addrspace(131074)*
  %301 = call i32 @llvm.genx.GenISA.simdBlockRead.i32.p131074i32(i32 addrspace(131074)* %300)		; visa id: 284
  %302 = add i32 %276, 64		; visa id: 286
  %303 = inttoptr i32 %302 to i32 addrspace(131074)*
  %304 = call i32 @llvm.genx.GenISA.simdBlockRead.i32.p131074i32(i32 addrspace(131074)* %303)		; visa id: 287
  %305 = add i32 %276, 128		; visa id: 289
  %306 = inttoptr i32 %305 to i32 addrspace(131074)*
  %307 = call i32 @llvm.genx.GenISA.simdBlockRead.i32.p131074i32(i32 addrspace(131074)* %306)		; visa id: 290
  %308 = add i32 %276, 192		; visa id: 292
  %309 = inttoptr i32 %308 to i32 addrspace(131074)*
  %310 = call i32 @llvm.genx.GenISA.simdBlockRead.i32.p131074i32(i32 addrspace(131074)* %309)		; visa id: 293
  %311 = add i32 %276, 256		; visa id: 295
  %312 = inttoptr i32 %311 to i32 addrspace(131074)*
  %313 = call i32 @llvm.genx.GenISA.simdBlockRead.i32.p131074i32(i32 addrspace(131074)* %312)		; visa id: 296
  %314 = add i32 %276, 320		; visa id: 298
  %315 = inttoptr i32 %314 to i32 addrspace(131074)*
  %316 = call i32 @llvm.genx.GenISA.simdBlockRead.i32.p131074i32(i32 addrspace(131074)* %315)		; visa id: 299
  %317 = add i32 %276, 384		; visa id: 301
  %318 = inttoptr i32 %317 to i32 addrspace(131074)*
  %319 = call i32 @llvm.genx.GenISA.simdBlockRead.i32.p131074i32(i32 addrspace(131074)* %318)		; visa id: 302
  %320 = add i32 %276, 448		; visa id: 304
  %321 = inttoptr i32 %320 to i32 addrspace(131074)*
  %322 = call i32 @llvm.genx.GenISA.simdBlockRead.i32.p131074i32(i32 addrspace(131074)* %321)		; visa id: 305
  %.28.vec.insert41.assembled.vect = insertelement <8 x i32> undef, i32 %301, i32 0		; visa id: 307
  %.28.vec.insert41.assembled.vect184 = insertelement <8 x i32> %.28.vec.insert41.assembled.vect, i32 %304, i32 1		; visa id: 307
  %.28.vec.insert41.assembled.vect185 = insertelement <8 x i32> %.28.vec.insert41.assembled.vect184, i32 %307, i32 2		; visa id: 307
  %.28.vec.insert41.assembled.vect186 = insertelement <8 x i32> %.28.vec.insert41.assembled.vect185, i32 %310, i32 3		; visa id: 307
  %.28.vec.insert41.assembled.vect187 = insertelement <8 x i32> %.28.vec.insert41.assembled.vect186, i32 %313, i32 4		; visa id: 307
  %.28.vec.insert41.assembled.vect188 = insertelement <8 x i32> %.28.vec.insert41.assembled.vect187, i32 %316, i32 5		; visa id: 307
  %.28.vec.insert41.assembled.vect189 = insertelement <8 x i32> %.28.vec.insert41.assembled.vect188, i32 %319, i32 6		; visa id: 307
  %.28.vec.insert41.assembled.vect190 = insertelement <8 x i32> %.28.vec.insert41.assembled.vect189, i32 %322, i32 7		; visa id: 307
  %dpas = call <8 x float> @llvm.genx.GenISA.sub.group.dpas.v8f32.v8f32.v8i32.v8i32(<8 x float> %.28.vec.insert.assembled.vect176, <8 x i32> %.28.vec.insert24.assembled.vect183, <8 x i32> %.28.vec.insert41.assembled.vect190, i32 11, i32 11, i32 8, i32 8, i1 false)		; visa id: 307
  %323 = add i32 %266, 32		; visa id: 308
  %324 = inttoptr i32 %323 to i32 addrspace(131073)*
  %325 = call i32 @llvm.genx.GenISA.simdBlockRead.i32.p131073i32(i32 addrspace(131073)* %324)		; visa id: 309
  %326 = add i32 %266, 96		; visa id: 311
  %327 = inttoptr i32 %326 to i32 addrspace(131073)*
  %328 = call i32 @llvm.genx.GenISA.simdBlockRead.i32.p131073i32(i32 addrspace(131073)* %327)		; visa id: 312
  %329 = add i32 %266, 160		; visa id: 314
  %330 = inttoptr i32 %329 to i32 addrspace(131073)*
  %331 = call i32 @llvm.genx.GenISA.simdBlockRead.i32.p131073i32(i32 addrspace(131073)* %330)		; visa id: 315
  %332 = add i32 %266, 224		; visa id: 317
  %333 = inttoptr i32 %332 to i32 addrspace(131073)*
  %334 = call i32 @llvm.genx.GenISA.simdBlockRead.i32.p131073i32(i32 addrspace(131073)* %333)		; visa id: 318
  %335 = add i32 %266, 288		; visa id: 320
  %336 = inttoptr i32 %335 to i32 addrspace(131073)*
  %337 = call i32 @llvm.genx.GenISA.simdBlockRead.i32.p131073i32(i32 addrspace(131073)* %336)		; visa id: 321
  %338 = add i32 %266, 352		; visa id: 323
  %339 = inttoptr i32 %338 to i32 addrspace(131073)*
  %340 = call i32 @llvm.genx.GenISA.simdBlockRead.i32.p131073i32(i32 addrspace(131073)* %339)		; visa id: 324
  %341 = add i32 %266, 416		; visa id: 326
  %342 = inttoptr i32 %341 to i32 addrspace(131073)*
  %343 = call i32 @llvm.genx.GenISA.simdBlockRead.i32.p131073i32(i32 addrspace(131073)* %342)		; visa id: 327
  %344 = add i32 %266, 480		; visa id: 329
  %345 = inttoptr i32 %344 to i32 addrspace(131073)*
  %346 = call i32 @llvm.genx.GenISA.simdBlockRead.i32.p131073i32(i32 addrspace(131073)* %345)		; visa id: 330
  %.28.vec.insert24.assembled.vect.1 = insertelement <8 x i32> undef, i32 %325, i32 0		; visa id: 332
  %.28.vec.insert24.assembled.vect177.1 = insertelement <8 x i32> %.28.vec.insert24.assembled.vect.1, i32 %328, i32 1		; visa id: 332
  %.28.vec.insert24.assembled.vect178.1 = insertelement <8 x i32> %.28.vec.insert24.assembled.vect177.1, i32 %331, i32 2		; visa id: 332
  %.28.vec.insert24.assembled.vect179.1 = insertelement <8 x i32> %.28.vec.insert24.assembled.vect178.1, i32 %334, i32 3		; visa id: 332
  %.28.vec.insert24.assembled.vect180.1 = insertelement <8 x i32> %.28.vec.insert24.assembled.vect179.1, i32 %337, i32 4		; visa id: 332
  %.28.vec.insert24.assembled.vect181.1 = insertelement <8 x i32> %.28.vec.insert24.assembled.vect180.1, i32 %340, i32 5		; visa id: 332
  %.28.vec.insert24.assembled.vect182.1 = insertelement <8 x i32> %.28.vec.insert24.assembled.vect181.1, i32 %343, i32 6		; visa id: 332
  %.28.vec.insert24.assembled.vect183.1 = insertelement <8 x i32> %.28.vec.insert24.assembled.vect182.1, i32 %346, i32 7		; visa id: 332
  %347 = add i32 %276, 512		; visa id: 332
  %348 = inttoptr i32 %347 to i32 addrspace(131074)*
  %349 = call i32 @llvm.genx.GenISA.simdBlockRead.i32.p131074i32(i32 addrspace(131074)* %348)		; visa id: 333
  %350 = add i32 %276, 576		; visa id: 335
  %351 = inttoptr i32 %350 to i32 addrspace(131074)*
  %352 = call i32 @llvm.genx.GenISA.simdBlockRead.i32.p131074i32(i32 addrspace(131074)* %351)		; visa id: 336
  %353 = add i32 %276, 640		; visa id: 338
  %354 = inttoptr i32 %353 to i32 addrspace(131074)*
  %355 = call i32 @llvm.genx.GenISA.simdBlockRead.i32.p131074i32(i32 addrspace(131074)* %354)		; visa id: 339
  %356 = add i32 %276, 704		; visa id: 341
  %357 = inttoptr i32 %356 to i32 addrspace(131074)*
  %358 = call i32 @llvm.genx.GenISA.simdBlockRead.i32.p131074i32(i32 addrspace(131074)* %357)		; visa id: 342
  %359 = add i32 %276, 768		; visa id: 344
  %360 = inttoptr i32 %359 to i32 addrspace(131074)*
  %361 = call i32 @llvm.genx.GenISA.simdBlockRead.i32.p131074i32(i32 addrspace(131074)* %360)		; visa id: 345
  %362 = add i32 %276, 832		; visa id: 347
  %363 = inttoptr i32 %362 to i32 addrspace(131074)*
  %364 = call i32 @llvm.genx.GenISA.simdBlockRead.i32.p131074i32(i32 addrspace(131074)* %363)		; visa id: 348
  %365 = add i32 %276, 896		; visa id: 350
  %366 = inttoptr i32 %365 to i32 addrspace(131074)*
  %367 = call i32 @llvm.genx.GenISA.simdBlockRead.i32.p131074i32(i32 addrspace(131074)* %366)		; visa id: 351
  %368 = add i32 %276, 960		; visa id: 353
  %369 = inttoptr i32 %368 to i32 addrspace(131074)*
  %370 = call i32 @llvm.genx.GenISA.simdBlockRead.i32.p131074i32(i32 addrspace(131074)* %369)		; visa id: 354
  %.28.vec.insert41.assembled.vect.1 = insertelement <8 x i32> undef, i32 %349, i32 0		; visa id: 356
  %.28.vec.insert41.assembled.vect184.1 = insertelement <8 x i32> %.28.vec.insert41.assembled.vect.1, i32 %352, i32 1		; visa id: 356
  %.28.vec.insert41.assembled.vect185.1 = insertelement <8 x i32> %.28.vec.insert41.assembled.vect184.1, i32 %355, i32 2		; visa id: 356
  %.28.vec.insert41.assembled.vect186.1 = insertelement <8 x i32> %.28.vec.insert41.assembled.vect185.1, i32 %358, i32 3		; visa id: 356
  %.28.vec.insert41.assembled.vect187.1 = insertelement <8 x i32> %.28.vec.insert41.assembled.vect186.1, i32 %361, i32 4		; visa id: 356
  %.28.vec.insert41.assembled.vect188.1 = insertelement <8 x i32> %.28.vec.insert41.assembled.vect187.1, i32 %364, i32 5		; visa id: 356
  %.28.vec.insert41.assembled.vect189.1 = insertelement <8 x i32> %.28.vec.insert41.assembled.vect188.1, i32 %367, i32 6		; visa id: 356
  %.28.vec.insert41.assembled.vect190.1 = insertelement <8 x i32> %.28.vec.insert41.assembled.vect189.1, i32 %370, i32 7		; visa id: 356
  %dpas.1 = call <8 x float> @llvm.genx.GenISA.sub.group.dpas.v8f32.v8f32.v8i32.v8i32(<8 x float> %dpas, <8 x i32> %.28.vec.insert24.assembled.vect183.1, <8 x i32> %.28.vec.insert41.assembled.vect190.1, i32 11, i32 11, i32 8, i32 8, i1 false)		; visa id: 356
  %371 = extractelement <8 x float> %dpas.1, i32 0		; visa id: 357
  %372 = bitcast float %371 to i32		; visa id: 358
  call void @llvm.genx.GenISA.simdBlockWrite.p131072i32.i32(i32 addrspace(131072)* %234, i32 %372)		; visa id: 358
  %373 = extractelement <8 x float> %dpas.1, i32 1		; visa id: 360
  %374 = bitcast float %373 to i32		; visa id: 361
  call void @llvm.genx.GenISA.simdBlockWrite.p131072i32.i32(i32 addrspace(131072)* %237, i32 %374)		; visa id: 361
  %375 = extractelement <8 x float> %dpas.1, i32 2		; visa id: 363
  %376 = bitcast float %375 to i32		; visa id: 364
  call void @llvm.genx.GenISA.simdBlockWrite.p131072i32.i32(i32 addrspace(131072)* %240, i32 %376)		; visa id: 364
  %377 = extractelement <8 x float> %dpas.1, i32 3		; visa id: 366
  %378 = bitcast float %377 to i32		; visa id: 367
  call void @llvm.genx.GenISA.simdBlockWrite.p131072i32.i32(i32 addrspace(131072)* %243, i32 %378)		; visa id: 367
  %379 = extractelement <8 x float> %dpas.1, i32 4		; visa id: 369
  %380 = bitcast float %379 to i32		; visa id: 370
  call void @llvm.genx.GenISA.simdBlockWrite.p131072i32.i32(i32 addrspace(131072)* %246, i32 %380)		; visa id: 370
  %381 = extractelement <8 x float> %dpas.1, i32 5		; visa id: 372
  %382 = bitcast float %381 to i32		; visa id: 373
  call void @llvm.genx.GenISA.simdBlockWrite.p131072i32.i32(i32 addrspace(131072)* %249, i32 %382)		; visa id: 373
  %383 = extractelement <8 x float> %dpas.1, i32 6		; visa id: 375
  %384 = bitcast float %383 to i32		; visa id: 376
  call void @llvm.genx.GenISA.simdBlockWrite.p131072i32.i32(i32 addrspace(131072)* %252, i32 %384)		; visa id: 376
  %385 = extractelement <8 x float> %dpas.1, i32 7		; visa id: 378
  %386 = bitcast float %385 to i32		; visa id: 379
  call void @llvm.genx.GenISA.simdBlockWrite.p131072i32.i32(i32 addrspace(131072)* %255, i32 %386)		; visa id: 379
  ret void, !stats.blockFrequency.digits !523, !stats.blockFrequency.scale !524		; visa id: 381
}
